import xss from 'xss';
import type { VulnerabilityResult, ScanTarget } from '../types/vulnerability';

const SQL_INJECTION_PATTERNS = [
  "' OR '1'='1",
  '" OR "1"="1',
  '1; DROP TABLE users',
  "1' OR '1'='1'--",
  '1 UNION SELECT null, version()',
];

const XSS_PAYLOADS = [
  '<script>alert("xss")</script>',
  '<img src="x" onerror="alert(1)">',
  'javascript:alert(1)',
  '<svg onload="alert(1)">',
];

export async function scanForVulnerabilities(target: ScanTarget): Promise<VulnerabilityResult[]> {
  const results: VulnerabilityResult[] = [];
  
  // Test SQL Injection
  for (const pattern of SQL_INJECTION_PATTERNS) {
    try {
      const response = await fetch(target.url + '?' + new URLSearchParams({
        ...target.params,
        q: pattern
      }));
      
      const text = await response.text();
      if (text.includes('SQL') || text.includes('mysql') || text.includes('error')) {
        results.push({
          type: 'sql',
          severity: 'high',
          description: 'Potential SQL injection vulnerability detected',
          payload: pattern,
          timestamp: Date.now()
        });
      }
    } catch (error) {
      console.error('Error during SQL injection test:', error);
    }
  }

  // Test XSS
  for (const payload of XSS_PAYLOADS) {
    const cleaned = xss(payload);
    if (cleaned !== payload) {
      results.push({
        type: 'xss',
        severity: 'high',
        description: 'Potential XSS vulnerability detected',
        payload: payload,
        timestamp: Date.now()
      });
    }
  }

  return results;
}

export function generateMockVulnerabilities(): VulnerabilityResult[] {
  const vulnerabilities: VulnerabilityResult[] = [];
  const types: ('sql' | 'xss' | 'other')[] = ['sql', 'xss', 'other'];
  const severities: ('low' | 'medium' | 'high')[] = ['low', 'medium', 'high'];

  const randomItem = <T>(arr: T[]): T => arr[Math.floor(Math.random() * arr.length)];

  // Generate 1-3 random vulnerabilities
  const count = Math.floor(Math.random() * 3) + 1;
  
  for (let i = 0; i < count; i++) {
    const type = randomItem(types);
    vulnerabilities.push({
      type,
      severity: randomItem(severities),
      description: `Mock ${type.toUpperCase()} vulnerability detected`,
      payload: type === 'sql' ? randomItem(SQL_INJECTION_PATTERNS) : randomItem(XSS_PAYLOADS),
      timestamp: Date.now()
    });
  }

  return vulnerabilities;
}