import React, { useState, useEffect } from 'react';
import { format } from 'date-fns';
import { generateMockVulnerabilities } from '../utils/vulnerabilityScanner';
import { sendEmailAlert } from '../utils/emailAlert';
import type { VulnerabilityResult } from '../types/vulnerability';

export default function VulnerabilityScanner() {
  const [targetUrl, setTargetUrl] = useState('');
  const [scanning, setScanning] = useState(false);
  const [vulnerabilities, setVulnerabilities] = useState<VulnerabilityResult[]>([]);
  const [emailConfig, setEmailConfig] = useState({
    enabled: false,
    email: ''
  });

  const handleScan = async () => {
    setScanning(true);
    try {
      // In a real implementation, we would use the actual scanner
      // For demo purposes, we'll use the mock generator
      const results = generateMockVulnerabilities();
      setVulnerabilities(prev => [...results, ...prev]);

      // Send email alerts for high severity vulnerabilities
      if (emailConfig.enabled) {
        results.forEach(vulnerability => {
          if (vulnerability.severity === 'high') {
            sendEmailAlert(vulnerability, {
              to: emailConfig.email,
              from: 'scanner@security.com',
              subject: `High Severity ${vulnerability.type.toUpperCase()} Vulnerability Detected`,
              text: vulnerability.description
            });
          }
        });
      }
    } catch (error) {
      console.error('Scan failed:', error);
    } finally {
      setScanning(false);
    }
  };

  return (
    <div className="space-y-6">
      <div className="bg-white p-6 rounded-lg shadow-md">
        <h2 className="text-xl font-semibold text-gray-800 mb-4">Vulnerability Scanner</h2>
        
        <div className="space-y-4">
          <div>
            <label htmlFor="targetUrl" className="block text-sm font-medium text-gray-700">
              Target URL
            </label>
            <input
              type="url"
              id="targetUrl"
              value={targetUrl}
              onChange={(e) => setTargetUrl(e.target.value)}
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              placeholder="https://example.com"
            />
          </div>

          <div className="flex items-center space-x-2">
            <input
              type="checkbox"
              id="emailAlerts"
              checked={emailConfig.enabled}
              onChange={(e) => setEmailConfig(prev => ({ ...prev, enabled: e.target.checked }))}
              className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
            />
            <label htmlFor="emailAlerts" className="text-sm text-gray-700">
              Enable Email Alerts
            </label>
          </div>

          {emailConfig.enabled && (
            <div>
              <label htmlFor="emailAddress" className="block text-sm font-medium text-gray-700">
                Email Address
              </label>
              <input
                type="email"
                id="emailAddress"
                value={emailConfig.email}
                onChange={(e) => setEmailConfig(prev => ({ ...prev, email: e.target.value }))}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              />
            </div>
          )}

          <button
            onClick={handleScan}
            disabled={scanning || !targetUrl}
            className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors disabled:bg-gray-400"
          >
            {scanning ? 'Scanning...' : 'Start Scan'}
          </button>
        </div>
      </div>

      {vulnerabilities.length > 0 && (
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">Scan Results</h3>
          <div className="space-y-4">
            {vulnerabilities.map((vuln, index) => (
              <div
                key={index}
                className={`p-4 rounded-lg border ${
                  vuln.severity === 'high'
                    ? 'bg-red-50 border-red-200'
                    : vuln.severity === 'medium'
                    ? 'bg-yellow-50 border-yellow-200'
                    : 'bg-blue-50 border-blue-200'
                }`}
              >
                <div className="flex justify-between items-start">
                  <div>
                    <h4 className="font-semibold text-gray-800">
                      {vuln.type.toUpperCase()} Vulnerability
                    </h4>
                    <p className="text-sm text-gray-600 mt-1">{vuln.description}</p>
                    <p className="text-xs text-gray-500 mt-2">
                      Detected: {format(vuln.timestamp, 'PPpp')}
                    </p>
                  </div>
                  <span
                    className={`px-2 py-1 text-xs font-semibold rounded ${
                      vuln.severity === 'high'
                        ? 'bg-red-200 text-red-800'
                        : vuln.severity === 'medium'
                        ? 'bg-yellow-200 text-yellow-800'
                        : 'bg-blue-200 text-blue-800'
                    }`}
                  >
                    {vuln.severity}
                  </span>
                </div>
                <div className="mt-2">
                  <p className="text-sm font-mono bg-gray-100 p-2 rounded">
                    {vuln.payload}
                  </p>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}